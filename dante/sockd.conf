# 文件源：https://github.com/wernight/docker-dante/blob/master/sockd.conf
# 参考：https://www.tumblr.com/evilabandon/30290868960/sokcs5%E8%BD%AF%E4%BB%B6dante%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97
#
# A sample sockd.conf
#
#
# The config file is divided into three parts;
#    1) server settings
#    2) rules
#    3) routes
#
# The recommended order is:
#   Server settings:
#               logoutput
#               internal
#               external
#               socksmethod
#               clientmethod
#               users
#               compatibility
#               extension
#               timeout
#               srchost
#
#  Rules:
#        client block/pass
#                from to
#                libwrap
#                log
#
#     block/pass
#                from to
#                socksmethod
#                command
#                libwrap
#                log
#                protocol
#                proxyprotocol
#
#  Routes:

# 定义了日志的输出位置，可以是syslog[/facility], stdout, stderr，一个指定文件，或者上述的组合。

# 服务器将通过 syslog 记录到 stdout 和 /var/log/sockd.log
#logoutput: syslog stdout /var/log/sockd.log
logoutput: stderr

# 定义了接受用户连接的IP地址，也可以写接口名称，如eth0

# 服务器将绑定到地址 10.1.1.1、端口 1080，并且仅接受发往该地址的连接。
#internal: 10.1.1.1 port = 1080
# 或者，可以使用接口名称代替地址。
#internal: eth0 port = 1080
internal: 0.0.0.0 port = 1080

# 定义了向外访问的IP地址，也可以写接口名称，如果有多个地址可以写多个。

# 来自服务器的所有传出连接都将使用该 IP 地址
# 195.168.1.1
#external: 192.168.1.1
external: eth0
external.rotation: route

# 列出可接受的身份验证方法，按优先顺序排列。
# 永远不会选择此处未设置的身份验证方法。
#
# 如果规则中未设置 socksmethod 字段，则全局
# 该规则填写了 socksmethod。
#

# 控制用户认证的方法，可以是以下之一或组合。
# none 不需要认证
# username 用户名密码
# gssapi kerberos认证
# rfc931 需要用户主机提供一个rfc931 reply，这个reply必须匹配一个/etc/passwd中的用户名
# pam 通过PAM方式认证
# badauth 通过BSD认证系统

# methods for socks-rules.
#socksmethod: username none #rfc931
socksmethod: username none  # No authentication.

# methods for client-rules.
clientmethod: none  # No authentication.

#or if you want to allow rfc931 (ident) too
#socksmethod: username rfc931 none

#or for PAM authentication
#socksmethod: pam

#
# User identities, an important section.
#

# 如果需要读取 sockd.conf ，写入 sockd.pid 等文件，
# 或使用密码认证等需要特权的操作，则最好将此值设为 root ，
# 如果不需要特权操作，则可以设成 user.unprivileged 相同的用户即可。

# 当做一些需要特权的事情时，它将使用用户 ID  "sockd".
#user.privileged: sockd

# 用于运行dante进程的用户名
# 当正常运行时，它将使用“sockd”的非特权用户id。
user.unprivileged: sockd

# 如果您不使用 libwrap，则不需要下面这行，因此请保留注释。
# 如果你使用 libwrap 支持进行编译，它应该使用什么用户 ID？
# 在执行 libwrap 命令时？  "libwrap".
#user.libwrap: libwrap


#
# 帮助客户实现兼容性的一些选项：
#

# 当客户端连接进入时，socks 服务器将尝试使用与客户端正在使用的相同端口，
# 此时 socks 服务器代表客户端出去（external: IP address）。

# 如果设置了此选项，Dante 也会尝试对保留端口执行此操作。
# 这通常需要将 user.privileged 设置为“root”。
#compatibility: sameport

# 如果您正在使用 Inferno Nettverk 绑定扩展，
# 并且在通过服务器运行服务器时遇到问题，您可以尝试设置此项。
#compatibility: reuseaddr

#
# Dante 服务器支持一些对 socks 协议的扩展。
# 这些要求 Socks 客户端实现相同的扩展，并且可以使用“extension”关键字来启用。
#
# 启用绑定扩展。
#extension: bind


#
# 杂项选项。
#

# 从客户端连接到它向我们发送请求需要多少秒？根据您的网络性能和支持的方法进行调整。
#timeout.negotiate: 30   # 在局域网上，这应该足够了。

# 在我们转储数据之前，客户端及其对等端可以空闲多少秒而不发送任何数据？
# 除非您出于某些原因禁用 tcp keep-alive，否则最好将其设置为 0，即 "forever"。
#timeout.io: 0 # or perhaps 86400, for a day.

# 您是否要接受来自没有 DNS 信息的地址的连接？
# 如果地址的 DNS 信息不匹配怎么办？
#srchost: nodnsunknown nodnsmismatch

#
# 实际规则有两种，它们在不同的层面上起作用。
#
# 首先检查以 "client" 为前缀的规则，并说明谁被允许以及谁不被允许与服务器对话/连接。
# 即包含可能有效客户端的 IP 范围。
# 出于安全原因，这些仅使用 IP 地址而不是主机名尤为重要。
#
# 当客户端发送其请求时，将稍后检查没有 "client" 前缀的规则，并将其用于评估实际的请求。
#

# "client" 上下文中的 "to:" 提供接受连接的地址，
# 即 Socks 服务器正在监听的地址，或者对于服务器正在监听的任何地址，仅提供 "0.0.0.0/0"。
#
# non-"client" 上下文中的 "to:" 给出了客户端 socks 请求的目的地。
#
# "from:" 在两种情况下都是源地址。
#


#
# The "client" rules.
#

# 允许所有人连接到该服务器。
client pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    log: connect error  # disconnect
}

# 允许此服务器上连接的客户端的所有操作。
socks pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    command: bind connect udpassociate
    log: error  # connect disconnect iooperation
    #socksmethod: username
}
# 允许所有入站数据包。
socks pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    command: bindreply udpreply
    log: error  # connect disconnect iooperation
}

# 下面是其他示例规则，假设我们的客户来自网络 10.0.0.0/8。

# 允许我们的客户，还提供了端口范围命令的示例。
#client pass {
#        from: 10.0.0.0/8 port 1-65535 to: 0.0.0.0/0
#        clientmethod: rfc931 # 匹配所有在密码文件中的已识别用户
#}

# 这与上面的相同，但也允许没有 rfc931 (ident) 的客户端。
# 实际上，这意味着 Socks 服务器将首先尝试获取 rfc931 回复（上述规则），如果失败，则尝试此规则。
#client pass {
#        from: 10.0.0.0/8 port 1-65535 to: 0.0.0.0/0
#}


# 尽快删除所有其他用户并记录连接，他们不在我们的网络上，也不需要连接到我们。
# 这是默认设置，但如果你自己给出规则，你可以指定详细信息。
#client block {
#        from: 0.0.0.0/0 to: 0.0.0.0/0
#        log: connect error
#}


# 控制哪些客户端可以发出哪些请求的规则
#

# 您可能不希望人们连接到环回地址，谁知道那时会发生什么。
#socks block {
#        from: 0.0.0.0/0 to: lo0
#        log: connect error
#}

# 172.16.0.0/12 上的人很坏，没人应该和他们说话。
# 记录连接请求并提供如何与 libwrap 交互的示例。
#socks block {
#        from: 0.0.0.0/0 to: 172.16.0.0/12
#        libwrap: spawn finger @%a
#        log: connect error
#}

# 除非您需要它，否则您可以阻止任何绑定请求。
#socks block {
#        from: 0.0.0.0/0 to: 0.0.0.0/0
#        command: bind
#        log: connect error
#}

# 或者您可能想要允许它，例如 "active" ftp 使用它。
# 请注意，还必须允许 "bindreply" 命令，它通常应来自 "0.0.0.0/0" ，
# 即如果您的客户端有绑定权限，那么它也有权接受来自任何地方的回复。
#socks pass {
#        from: 10.0.0.0/8 to: 0.0.0.0/0
#        command: bind
#        log: connect error
#}

# 一些连接期望某种 "reply" ，这可能是对绑定请求的回复，
# 也可能是对 udppacket 的回复，因为 udp 是基于数据包的。
# 请注意，没有采取任何措施来验证它是否是 "genuine" 的回复，
# 这通常是不可能的。下面将允许所有 "replies" 进入 10.0.0.0/8 网络上的客户端。
#socks pass {
#        from: 0.0.0.0/0 to: 10.0.0.0/8
#        command: bindreply udpreply
#        log: connect error
#}


# 如果他们使用用户名进行身份验证，则传递任何与 example.com 域的 http 连接。
# 这会匹配 "example.com" 本身以及以 ".example.com" 结尾的所有内容。
#socks pass {
#        from: 10.0.0.0/8 to: .example.com port = http
#        log: connect error
#        clientmethod: username
#}


# 阻止任何其他 http 连接到 example.com 域。
#socks block {
#        from: 0.0.0.0/0 to: .example.com port = http
#        log: connect error
#}

# 我们内部网络 10.0.0.0/8 中的每个人都可以使用 tcp 和 udp 进行其他所有操作。
#socks pass {
#        from: 10.0.0.0/8 to: 0.0.0.0/0
#        protocol: tcp udp
#}

# 最后一行，阻止其他所有人。这是默认设置，但如果你自己提供一个，你可以指定自己的日志记录/操作
#socks block {
#        from: 0.0.0.0/0 to: 0.0.0.0/0
#        log: connect error
#}

# 通过上游 socks 服务器路由所有 http 连接，又称 "server-chaining" 。
#route {
# from: 10.0.0.0/8 to: 0.0.0.0/0 port = http via: socks.example.net port = socks
#}
