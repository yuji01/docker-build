FROM ubuntu:jammy
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
    LANG=zh_CN.UTF-8 \
    SHELL=/bin/bash \
    PS1="\u@\h:\w \$ " \
    PAGERMAID_DIR=/pagermaid \
    DEBIAN_FRONTEND=noninteractive \
    python_version=3.10.14

SHELL ["/bin/bash", "-c"]

WORKDIR /pagermaid/workdir

RUN source ~/.bashrc \
    && apt update \
    ## 编译安装python，python依赖
    && apt install -y \
       proxychains4 \
       sudo \
       git \
       curl \
       wget \
       openssl \
       build-essential \
       libssl-dev \
       zlib1g-dev \
       libncurses5-dev \
       libnss3-dev \
       libreadline-dev \
       libffi-dev \
       libsqlite3-dev \
       libbz2-dev \
       liblzma-dev \

    # 安装python
    && wget https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tgz -O /tmp/Python-${python_version}.tgz \

    # 解压到指定目录
    && tar -xf /tmp/Python-${python_version}.tgz -C /tmp \

    # --enable-optimizations 参数会启用优化选项，尽管编译时间会更长，但生成的 Python 会更加高效。
    && cd /tmp/Python-${python_version} \
    && ./configure --enable-optimizations \

    # 编译
    && make -j $(nproc) && echo "编译成功" || echo "编译失败" \

    # 安装
    # 使用标准的 make install，它将覆盖默认的系统 python3 二进制文件
    && make altinstall && echo "安装成功" || echo "安装失败" \
    
    # 创建 Python3 的符号链接
    && py_version=$(echo $python_version | cut -d . -f1,2) \
    && ln -s /usr/local/bin/python${py_version} /usr/bin/python3 \
    && ln -s /usr/local/bin/python${py_version} /usr/bin/python \
    
    # 安装pip
    && wget https://bootstrap.pypa.io/get-pip.py \
    && python3 get-pip.py \
    && pip --version && echo "pip 安装成功" || echo "安装失败" \

    # 安装编译依赖
    && apt install --no-install-recommends -y \
    # 这是跨平台交叉编译要用到的包，如果自行构建，有可能不需要
       tesseract-ocr \
       tesseract-ocr-eng \
       tesseract-ocr-chi-sim \
       language-pack-zh-hans \
       neofetch \
       imagemagick \
       ffmpeg \
       fortune-mod \
       figlet \
       libmagic1 \
       libzbar0 \
       iputils-ping \

    ## 设置时区
    && ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    && echo "Asia/Shanghai" > /etc/timezone \

    ## 升级 pip 到最新的版本后进行配置
    && python -m pip install --upgrade pip \
#    && pip config set global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple \

    ## 添加用户
    && echo "pagermaid ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/pagermaid \
    && useradd pagermaid -r -m -d /pagermaid -s /bin/bash \
    && usermod -aG sudo,users pagermaid \

    ## 克隆仓库
    && git clone -b master https://github.com/TeamPGM/PagerMaid-Pyro.git /pagermaid/workdir \
    && cd /pagermaid/workdir \
    && git config --global pull.ff only \

    ## pip install
    && pip install -r requirements.txt \

    ## 修复google和其他
    && pip install cchardet magic_google jieba pinyin bs4 \

    ## 卸载编译依赖，清理安装缓存
    && sudo apt-get purge --auto-remove -y \
       build-essential \
       apt-utils \
       libxslt1-dev \
       libxml2-dev \
       libssl-dev \
       libffi-dev \
       zlib1g-dev \
       tcl8.6-dev \
       libimagequant-dev \
       libraqm-dev \
       libjpeg-dev \
       libtiff5-dev \
       libopenjp2-7-dev \
       libfreetype6-dev \
       liblcms2-dev \
       libwebp-dev \
       libharfbuzz-dev \
       libfribidi-dev \
       libxcb1-dev \
       pkg-config \
    && apt-get clean -y \
    && rm -rf \
    ## 删除apt和pip的安装缓存
       /tmp/* \
       /var/lib/apt/lists/* \
       /var/tmp/* \
       ~/.cache

ENTRYPOINT ["proxychains4", "sh", "utils/docker-config.sh"]
