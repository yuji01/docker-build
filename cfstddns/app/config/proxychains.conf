# proxychains.conf  VER 4.x
#
#        HTTP, SOCKS4a, SOCKS5 tunneling proxifier with DNS.


# 下面的选项标识了如何处理 ProxyList。
# 每次只能取消注释一个选项，
# 否则将接受最后出现的选项
#
dynamic_chain
#
# Dynamic - 每个连接都将通过链接代理完成
# 所有代理按列表中出现的顺序链接
# 至少一个代理必须在线才能在链中播放
#（跳过无效代理）
# 否则将向应用程序返回 EINTR
#
#strict_chain
#
# Strict - 每个连接都将通过链接代理完成
# 所有代理按列表中出现的顺序链接
# 所有代理必须在线才能在链中播放
# 否则将向应用程序返回 EINTR
#
#round_robin_chain
#
# Round Robin - 每个连接将通过链式代理完成
# chain_len 长度
# 所有代理按列表中出现的顺序链接
# 至少一个代理必须在线才能在链中播放
#（跳过无效代理）。
# 当前代理链的开始是最后一个代理之后的代理
# 先前调用的代理链中的代理。
# 如果在寻找代理时到达代理链的末尾
# 重新从头开始。
# 否则将 EINTR 返回到应用程序
# 在多线程环境中无法保证这些语义。
#
#random_chain
#
# Random - 每个连接将通过列表中的随机代理完成
#（或代理链，参见 chain_len）。
# 此选项适合测试您的 IDS :)

# 仅当 random_chain 或 round_robin_chain 时才有意义
#chain_len = 2

# 安静模式（库无输出）
#quiet_mode

## 代理 DNS 请求 - DNS 数据无泄漏
#（禁用以下所有 3 项以不代理您的 DNS 请求）

# 方法 1。该方法使用 proxychains4 样式方法执行远程 DNS：
# 生成一个线程来处理 DNS 请求并传递从内部列表（通过 remote_dns_subnet）分配的 ip。
# 这是最简单（设置方面）和最快的方法，但是在
# 具有错误 libcs?? 和非常复杂的软件（如 webbrowsers）的系统上
# 这可能不起作用和/或导致崩溃。
proxy_dns

# 方法 2. 使用旧的 proxyresolv 脚本来代理 DNS 请求
# 采用 proxychains 3.1 样式。需要 $PATH 中的 `proxyresolv`
# 以及动态链接的 `dig` 二进制文件。
# 这比 `proxy_dns` 慢很多，不支持 .onion URL，
# 但可能与 Web 浏览器等复杂软件更兼容。
#proxy_dns_old

# 方法 3. 使用 proxychains4-daemon 进程来处理远程 DNS 请求。
# 这与线程化的 `proxy_dns` 方法类似，但它要求
# proxychains4-daemon 已在指定地址上运行。
# 优点是它不执行 malloc/线程，因此它应该与复杂、异步不安全的软件相当兼容。
# 请注意，如果您在使用此方法之前未启动 proxychains4-daemon，
# 该进程将直接挂起。
#proxy_dns_daemon 127.0.0.1:1053

# 设置用于内部远程 DNS 映射的 A 类子网号
# 我们默认使用保留的 224.x.x.x 范围，
# 如果代理应用程序发出 DNS 请求，我们将返回该范围内的 IP。
# 在进一步访问此 IP 时，我们会将保存的 DNS 名称发送到代理。
# 如果某些控制狂应用程序检查返回的 IP 并拒绝
# 连接，您可以使用另一个子网，例如 10.x.x.x 或 127.x.x.x。
# 当然，您应该确保代理应用程序不需要
# *真正* 访问此子网。
# 即不要在 localnet 部分中使用相同的子网
#remote_dns_subnet 127 
#remote_dns_subnet 10
remote_dns_subnet 224

# 一些超时（以毫秒为单位）
tcp_read_time_out 15000
tcp_connect_time_out 8000

### 本地网络排除示例
## localnet 范围将*不*使用代理进行连接。
## 请注意，localnet 仅在将纯 IP 地址传递给应用程序时才有效，
## 主机名通过 /etc/hosts 解析，或者 proxy_dns 被禁用或使用 proxy_dns_old。

## 排除与 192.168.1.0/24 端口 80 的连接
# localnet 192.168.1.0:80/255.255.255.0

## 排除与 192.168.100.0/24 的连接
# localnet 192.168.100.0/255.255.255.0

## 排除与端口 80 的任何位置的连接
# localnet 0.0.0.0:80/0.0.0.0
# localnet [::]:80/0

## RFC6890 环回地址范围
## 如果启用此功能，则必须确保 remote_dns_subnet 不是 127
## 如果要使用连接到本地主机的应用程序，则需要启用此功能。
# localnet 127.0.0.0/255.0.0.0
# localnet ::1/128

## RFC1918 私有地址范围
# localnet 10.0.0.0/255.0.0.0
# localnet 172.16.0.0/255.240.0.0
# localnet 192.168.0.0/255.255.0.0

### dnat 的示例
## 尝试代理连接到 dnatted 的目的地，
## 将导致代理连接到新的指定目的地。
## 每当我连接到端口 1234 上的 1.1.1.1 时，实际上会连接到端口 443 上的 1.1.1.2
# dnat 1.1.1.1:1234  1.1.1.2:443

## 每当我连接到端口 443 上的 1.1.1.1 时，实际上都会连接到端口 443 上的 1.1.1.2
##（无需再次写入 :443）
# dnat 1.1.1.2:443  1.1.1.2

## 无论我连接到 1.1.1.1 端口上的哪个端口，实际上都会连接到 1.1.1.2 端口上的 443
# dnat 1.1.1.1  1.1.1.2:443

## 始终连接到 1.1.1.2，而不是 1.1.1.1
# dnat 1.1.1.1  1.1.1.2

# ProxyList 格式
#       type  ip  port [user pass]
#       （值以“制表符”或“空白”分隔）
#
#       只有数字 ipv4 地址有效
#
#
#        Examples:
#
#               socks5  192.168.67.78   1080    lamer   secret
#               http    192.168.89.3    8080    justu   hidden
#               socks4  192.168.1.49    1080
#               http    192.168.39.93   8080    
#               
#
#       代理类型: http, socks4, socks5, raw
#         * raw: 流量无需修改，直接转发到代理。
#        ( 支持的身份验证类型： "basic"-http  "user/pass"-socks )
#
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
socks5  127.0.0.1  9050
